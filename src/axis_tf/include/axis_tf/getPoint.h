// Generated by gencpp from file axis_tf/getPoint.msg
// DO NOT EDIT!


#ifndef AXIS_TF_MESSAGE_GETPOINT_H
#define AXIS_TF_MESSAGE_GETPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace axis_tf
{
template <class ContainerAllocator>
struct getPoint_
{
  typedef getPoint_<ContainerAllocator> Type;

  getPoint_()
    : x1(0.0)
    , x2(0.0)
    , x3(0.0)
    , x4(0.0)  {
    }
  getPoint_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , x2(0.0)
    , x3(0.0)
    , x4(0.0)  {
  (void)_alloc;
    }



   typedef float _x1_type;
  _x1_type x1;

   typedef float _x2_type;
  _x2_type x2;

   typedef float _x3_type;
  _x3_type x3;

   typedef float _x4_type;
  _x4_type x4;





  typedef boost::shared_ptr< ::axis_tf::getPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::axis_tf::getPoint_<ContainerAllocator> const> ConstPtr;

}; // struct getPoint_

typedef ::axis_tf::getPoint_<std::allocator<void> > getPoint;

typedef boost::shared_ptr< ::axis_tf::getPoint > getPointPtr;
typedef boost::shared_ptr< ::axis_tf::getPoint const> getPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::axis_tf::getPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::axis_tf::getPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace axis_tf

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'axis_tf': ['/home/zhangeaky/dobot_ws/src/axis_tf/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::axis_tf::getPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::axis_tf::getPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::axis_tf::getPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::axis_tf::getPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::axis_tf::getPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::axis_tf::getPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::axis_tf::getPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acf18b8b715a864b0f8fd6b6e328305f";
  }

  static const char* value(const ::axis_tf::getPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacf18b8b715a864bULL;
  static const uint64_t static_value2 = 0x0f8fd6b6e328305fULL;
};

template<class ContainerAllocator>
struct DataType< ::axis_tf::getPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "axis_tf/getPoint";
  }

  static const char* value(const ::axis_tf::getPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::axis_tf::getPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x1\n\
float32 x2\n\
float32 x3\n\
float32 x4\n\
";
  }

  static const char* value(const ::axis_tf::getPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::axis_tf::getPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.x2);
      stream.next(m.x3);
      stream.next(m.x4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct getPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::axis_tf::getPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::axis_tf::getPoint_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "x2: ";
    Printer<float>::stream(s, indent + "  ", v.x2);
    s << indent << "x3: ";
    Printer<float>::stream(s, indent + "  ", v.x3);
    s << indent << "x4: ";
    Printer<float>::stream(s, indent + "  ", v.x4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AXIS_TF_MESSAGE_GETPOINT_H
